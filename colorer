#!/usr/bin/env python3
import os
import subprocess
import sys
import glob
import re


HOME = os.path.expanduser('~') + '/'
CACHE_DIR = HOME + ".cache/colorer/"

if sys.argv[1] == "-R":
    with open(CACHE_DIR + "colorscheme", "r") as file_flux:
        COLORSCHEME = file_flux.read()
else:
    COLORSCHEME = HOME + ".config/colorer/colorschemes/" + sys.argv[1]

TEMPLATES = glob.glob(HOME + ".config/colorer/templates/*")
COMMANDS = HOME + '.config/colorer/commands'
print(COMMANDS)

colors = dict()

# Get the keys and values from the file to a dict
with open(COLORSCHEME, "r") as file_flux:
    for line in file_flux:
        key = line.split(" ")[0]
        color = line.split(" ")[1]
        color = color.replace("\n", "")
        colors[key] = color

colors['colorscheme'] = sys.argv[1]  # get the 'colorscheme' keyword available


# Replaces the keyword in the string
def replace_line(string):
    line = ''
    for color in colors.items():
        if re.search("{" + color[0] + "}", string) != None:
            line = re.sub("{" + color[0] + "}", color[1], string)
            # line = line.replace("\n", "")
    if line != '':
        return line
    else:
        return string


# write files from templates
for file in TEMPLATES:
    input_flux = open(file, "r")
    output_flux = open(CACHE_DIR + file.split("/")[-1], "w")

    for line in input_flux:
        new_line = replace_line(line)
        output_flux.write(new_line)

    input_flux.close()
    output_flux.close()

with open(CACHE_DIR + "colorscheme", "w") as file_flux:
    file_flux.write(COLORSCHEME)

# Run commands written in COMMAND, can use keywords
print('Run commands in {}'.format(COMMANDS))
commands = ''
with open(COMMANDS, 'r') as file_flux:
    for line in file_flux:
        command = replace_line(line)
        commands += command
print(commands)
subprocess.Popen(commands, shell=True)

# Reload terminals with escape sequences
print("Change terminal colors")
tty_pattern = "/dev/pts/[0-9]*"
with open(CACHE_DIR + "sequences", "r") as file:
    sequences = file.read()

for term in glob.glob(tty_pattern):
    with open(term, "w") as file:
        file.write(sequences)
